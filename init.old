;; Emacs config based on  http://www.aaronbedra.com/emacs.d/

; Packages
;
;
(add-to-list 'load-path "~/.emacs.d/lisp/")

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize)
(when (not package-archive-contents)
    (package-refresh-contents))

(defvar my-packages '(smex js2-mode web-mode xclip yasnippet company iedit)  "Default packages")
; for haskell
; stack install happy hasktags stylish-haskell ghc-mod hlint hoogle structured-haskell-mode hindent cabal-helper present?
; stack install happy stylish-haskell ghc-mod hlint structured-haskell-mode hindent cabal-helper
; stack install haskell-docs hlint structured-haskell-mode hindent
(setq my-packages (append my-packages '(haskell-mode ghc company-ghc shm)))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

; Splash
;
(setq inhibit-splash-screen t
            initial-scratch-message nil)

; autosave
(defun save-all ()
    (interactive)
    (save-some-buffers t))

(add-hook 'focus-out-hook 'save-all)

;; Server mode
;;(if (not server-mode)
;;    (server-start nil t))

;; EasyPG
(require 'epa-file)
(epa-file-enable)


; Yasnippet
(yas-global-mode 1)
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/.emacs.d/snippets")))

; bell
(setq ring-bell-function
      (lambda ()
        (call-process-shell-command "xset led named 'Scroll Lock'")
        (call-process-shell-command "xset -led named 'Scroll Lock'")))

; clojure
;(when (locate-library "clojure-mode")
;    (setq initial-major-mode 'clojure-mode))
(add-hook 'clojure-mode-hook #'paredit-mode)
(setq nrepl-log-messages t)
(setq cider-show-error-buffer 'only-in-repl)

; Neotree
(global-set-key [f5] 'neotree-toggle)

;
(defun dired-find-marked-files ()
  (interactive)
  (dolist (f (dired-get-marked-files)) 
    (find-file f)))
(eval-after-load 'dired
  '(define-key dired-mode-map (kbd "F") 'dired-find-marked-files))

; Prjectile

;perl
;
(defalias 'perl-mode 'cperl-mode)
(defun my-cperl-mode-hook ()
  (setq indent-tabs-mode t
		cperl-indent-level 4
		cperl-close-paren-offset -4
		cperl-continued-statement-offset 4
		cperl-indent-parens-as-block t
		cperl-tab-always-indent t))
(add-hook 'cperl-mode-hook 'my-cperl-mode-hook)

(defun my-cperl-indent-command ()
  "indent as cperl normally
  indent relatively inside multi-line strings.
  "
  (interactive)
  (let ((state (syntax-ppss)))
    (if (and (nth 3 state)              ;string
             (and (nth 8 state)         ;multi-line?
                  (< (nth 8 state) (point-at-bol))))
      (indent-relative)
      (cperl-indent-command))))
(eval-after-load "cperl-mode" '(define-key cperl-mode-map [remap cperl-indent-command] 'my-cperl-indent-command))


;; disable vc-git
(setq vc-handled-backends ())

; Font
;
;(set-default-font "DejaVu Sans Mono-11")

; charsets
(set-coding-system-priority 'utf-8 'cp1251 'emacs-mule)

; tramp
(setq tramp-default-method "ssh")
;;(setq tramp-auto-save-directory "C:/Users/Guest")
(when (eq window-system 'w32)
  (setq tramp-default-method "plink"))


; save history
(savehist-mode 1)

; :E
(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

;recent files
(require 'recentf)
(setq recentf-auto-cleanup 'never) ;; for tramp, disable before (recentf-mode 1)!
(setq recentf-max-saved-items 50)
(setq recentf-max-menu-items 50)
(recentf-mode 1)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

; iedit
(require 'iedit)

; smartscan
;(global-smartscan-mode 1)

; Scroll bar, Tool bar, Menu bar
;
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)


; Show line number the cursor is on, in status bar (the mode line), cursol blinking off
;
(line-number-mode t)
(column-number-mode t)
(blink-cursor-mode -1)

; Marking text
;
;
(cua-mode t)
(setq cua-enable-cua-keys nil)
(transient-mark-mode 1)
(delete-selection-mode t)

;(global-set-key [(shift delete)] 'clipboard-kill-region)
;(global-set-key [(control insert)] 'clipboard-kill-ring-save)
;(global-set-key [(shift insert)] 'clipboard-yank)
; stops killing/yanking interacting with primary X11 selection and start to use clipboard
(setq x-select-enable-primary nil)
(setq x-select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)



; Frame title
;
;
(when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

; It's also nice to be able to see when a file actually ends.
;
;
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
    (toggle-indicate-empty-lines))


; Backups
;
(setq make-backup-files nil)
(setq auto-save-default        nil)
(setq auto-save-list-file-name nil)
;;(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
;;(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
; Disable file interlocking system: the symbolic link indicates that an instance of emacs is editing this file
(setq create-lockfiles nil)


; Yes and No
;
(defalias 'yes-or-no-p 'y-or-n-p)

; Hippie expand
;
(setq hippie-expand-try-functions-list '(try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-complete-lisp-symbol-partially try-complete-lisp-symbol))

; Company
;
;; Enable company globally for all mode
;(global-company-mode)
;; Reduce the time after which the company auto completion popup opens
(setq company-idle-delay 0.2)
(setq company-dabbrev-downcase nil)

; Keybinings
;
(global-set-key (kbd "RET") 'newline-and-indent)
;(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "C-p") 'hippie-expand)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "M-g") 'goto-line)
(global-set-key (kbd "M-s") 'delete-char)
(global-set-key (kbd "M-q") 'cua-paste)
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;(define-key isearch-mode-map "\C-f" 'isearch-repeat-forward)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-d") 'kill-whole-line)
(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-x C-z") 'undo)
(global-set-key (kbd "C-SPC") 'mark-sexp)
(global-set-key (kbd "<f2>") 'save-buffer)
(global-set-key (kbd "M-r") 'replace-regexp)
(global-set-key (kbd "C-M-z") 'kill-emacs)
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
(global-set-key (kbd "C-`") 'bs-show)
(global-set-key [C-tab] 'other-window)
(global-set-key [C-next] 'bs-show)
(global-set-key [C-prior] 'bs-show)
(global-set-key [insert] 'bs-show)
;(global-set-key (kbd "M-[ h") 'beginning-of-line)                                 
;(global-set-key (kbd "M-[ f") 'end-of-line)

; Buffer cycling
(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key (kbd "M-`") 'switch-to-previous-buffer)

(defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffer.
      - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

(global-set-key (kbd "M-e") 'copy-line)


; Visual bell, dialogs, keystrokes timeout
;
;
(setq 
    use-dialog-box nil
    visible-bell 'nil)

;
; Scrolling
(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)

; Vendor dir
;
;
;(defvar custom/vendor-dir (expand-file-name "vendor" user-emacs-directory))
;(add-to-list 'load-path custom/vendor-dir)
;
;(dolist (project (directory-files custom/vendor-dir t "\\w+"))
;  (when (file-directory-p project)
;    (add-to-list 'load-path project)))

; Parens
(show-paren-mode 1)
(setq show-paren-delay 0)

;;
;; Packages setup
;;
;(load "rxvt.el")

; xclip
;(xclip-mode 1)

; mouse in XTerm
(xterm-mouse-mode t)

; js2-mode
;(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.cjsx\\'" . coffee-mode))
(add-hook 'js-mode-hook 'js2-minor-mode)


; Redo +
(require 'redo+)
(global-set-key (kbd "C-t") 'redo)

; Smex
(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;
; no tabs
(setq-default indent-tabs-mode nil)

;(require 'lua-block)
;(lua-block-mode t)

; web mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.inc\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tmpl?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.gohtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(defun my-web-mode-hook ()
  "Hooks for Web mode."
    ; Yas
    (yas-activate-extra-mode 'html-mode)
    ; tide
    (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (tide-setup)
              (flycheck-mode +1)
              (setq flycheck-check-syntax-automatically '(save mode-enabled))
              (eldoc-mode +1))
    ; es6
    (when (string-equal "jsx" (file-name-extension buffer-file-name))
              (flycheck-mode +1)
              (setq flycheck-check-syntax-automatically '(save mode-enabled)))
    ;
    (when (string-equal web-mode-content-type "javascript")
                  (web-mode-set-content-type "jsx"))
    (setq web-mode-engines-alist '(("razor" . "\\.gohtml\\'")))
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (setq web-mode-style-padding 0)
    (setq web-mode-script-padding 0)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-indentation nil)
    (setq web-mode-enable-current-element-highlight t)
    (when (string-equal "tmpl" (file-name-extension buffer-file-name))
      (setq indent-tabs-mode t)
      (setq web-mode-css-indent-offset 4)
      (setq web-mode-markup-indent-offset 4)
      (setq web-mode-code-indent-offset 4)))
(add-hook 'web-mode-hook  'my-web-mode-hook)


;; Typescript
(add-hook 'typescript-mode-hook
          (lambda ()
            (tide-setup)
            (flycheck-mode +1)
            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (eldoc-mode +1)
            ;; company is an optional dependency. You have to
            ;; install it separately via package-install
            (company-mode-on)))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)
;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

; Saveplace
;(require 'saveplace)
;(setq-default save-place t)
(save-place-mode 1)

;; Useful funcs and bindings for them
;;

;
;
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))



; Duplicate line
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
With argument N, make N copies.
With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))

(global-set-key (kbd "M-f") 'duplicate-line-or-region)


;; vi-like match parens
(defun match-parenthesis (arg)
  "Match the current character according to the syntax table.

   Based on the freely available match-paren.el by Kayvan Sylvan.
   I merged code from goto-matching-paren-or-insert and match-it.

   You can define new \"parentheses\" (matching pairs).
   Example: angle brackets. Add the following to your .emacs file:

    (modify-syntax-entry ?< \"(>\" )
    (modify-syntax-entry ?> \")<\" )

   Simon Hawkin <cema@cs.umd.edu> 03/14/1998"
  (interactive "p")
  (let
      ((syntax (char-syntax (following-char))))
    (cond
     ((= syntax ?\()
      (forward-sexp 1) (backward-char))
     ((= syntax ?\))
      (forward-char) (backward-sexp 1))
     (t (message "No match"))
     )
    ))
(global-set-key (kbd "<f6>") 'match-parenthesis)


; search goodies
(defun my-isearch-word-at-point-back ()
  (interactive)
  (call-interactively 'isearch-backward-regexp)
  (my-isearch-yank-symbol))

(defun my-isearch-word-at-point ()
  (interactive)
  (call-interactively 'isearch-forward-regexp)
  (my-isearch-yank-symbol))

(defun my-isearch-yank-symbol ()
  "*Put symbol at current point into search string."
  (let ((sym (symbol-at-point)))
    (if sym
      (progn
        (setq isearch-regexp t
              ;isearch-string (concat "\\<" (regexp-quote (symbol-name sym)) "\\>")
              isearch-string (regexp-quote (symbol-name sym))
              isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
              isearch-yank-flag t))
      (ding)))
  (isearch-search-and-update))

(global-set-key (kbd "<f7>") 'my-isearch-word-at-point-back)
(global-set-key (kbd "<f8>") 'my-isearch-word-at-point)


(defun my-imenu-goto-def ()
  (interactive)
  (let ((curword (thing-at-point 'symbol)))
    (imenu curword)))

(defun my-imenu-go-function-list ()
    (interactive) 
      (let ((unread-command-events  (listify-key-sequence "func\n") ))
          (call-interactively 'imenu)))

(global-set-key (kbd "<f9>") 'my-imenu-goto-def)
;(global-set-key (kbd "C-x C-o") 'my-imenu-go-function-list)
;(global-set-key (kbd "C-x C-o") (kbd "M-x imenu<return>func<return><tab>"))


; Window size
(defun set-frame-size-according-to-resolution ()
  (interactive)
  (if window-system
  (progn
    ;; use 120 char wide window for largeish displays
    ;; and smaller 80 column windows for smaller displays
    ;; pick whatever numbers make sense for you
    (if (> (x-display-pixel-width) 1280)
        (add-to-list 'default-frame-alist (cons 'width 172))
      (add-to-list 'default-frame-alist (cons 'width 80)))
    ;; for the height, subtract a couple hundred pixels
    ;; from the screen height (for panels, menubars and
    ;; whatnot), then divide by the height of a char to
    ;; get the height we want
    (add-to-list 'default-frame-alist 
                 (cons 'height (/ (- (x-display-pixel-height) 250) (frame-char-height)))))))

;;(set-frame-size-according-to-resolution)


; Making C-x k end an emacsclient session
(add-hook 'server-switch-hook
          (lambda ()
            (when (current-local-map)
              (use-local-map (copy-keymap (current-local-map))))
            (when server-buffer-clients
              (local-set-key (kbd "C-x C-k") 'server-edit)
              (local-set-key (kbd "C-x k") 'server-edit))))


; useful funtion to clear repl buffer
(defun my-clear-repl ()
    (interactive)
      (let ((comint-buffer-maximum-size 0))
            (comint-truncate-buffer)))


;; Haskell
;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;(add-hook 'haskell-mode-hook 'turn-on-hi2)
;(setq hi2-show-indentations nil)
;(add-hook 'haskell-mode-hook 'structured-haskell-mode)
;(add-hook 'haskell-mode-hook 'hindent-mode) ; M-q

;(add-hook 'haskell-mode-hook 'haskell-doc-mode)
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
(add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)

;; (add-hook 'haskell-mode-hook 'intero-mode)
;; (with-eval-after-load 'intero
;;   (flycheck-add-next-checker 'intero '(warning . haskell-hlint))
;;   (setq intero-extra-ghc-options
;;         '("-fdefer-type-errors -Wunused-imports"))
;;   (setq intero-extra-ghci-options
;;         '("-fdefer-type-errors"))
;; )
;
; company
;(add-to-list 'company-backends 'company-ghc)
(setq company-ghc-show-info t
      haskell-interactive-popup-errors nil
      haskell-process-auto-import-loaded-modules t
      haskell-process-log t
      haskell-process-suggest-remove-import-lines t
      haskell-process-suggest-language-pragmas nil
      haskell-process-suggest-no-warn-orphans nil
      haskell-process-suggest-overloaded-strings nil
      haskell-process-path-ghci "stack"
      haskell-process-type 'stack-ghci
      haskell-process-args-ghci "ghci")

(eval-after-load 'haskell-mode '(progn
  (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "<f2>") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
  (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
  (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)))

(eval-after-load 'haskell-mode '(progn
     (setq haskell-process-args-ghci
           '("-ferror-spans" "-fshow-loaded-modules"))
     (setq haskell-process-args-cabal-repl
           '("--ghc-options=-ferror-spans -fshow-loaded-modules"))
     (setq haskell-process-args-stack-ghci
           '("--ghci-options=-ferror-spans -fshow-loaded-modules"
             "--no-build" "--no-load"))
     (setq haskell-process-args-cabal-new-repl
           '("--ghc-options=-ferror-spans -fshow-loaded-modules"))
     ))

;; golang
(add-hook 'go-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends) '(company-go))
	    (flycheck-mode)
            (company-mode)))
;(require 'flycheck-gometalinter)
;(eval-after-load 'flycheck
;  '(add-hook 'flycheck-mode-hook #'flycheck-gometalinter-setup))
;(setq flycheck-gometalinter-fast t)

;; erlang
;(require 'erlang-start)

;; compile and save
;(defun save-all-and-compile ()
;  (interactive)
;  (save-some-buffers 1)
;  (erlang-compile))
(add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))
(setq erlang-root-dir "/usr/local/lib/erlang")
(add-to-list 'exec-path "/usr/local/lib/erlang/bin")
(setq erlang-man-root-dir "/usr/local/lib/erlang/man")

(defun my-erlang-mode-hook ()
  ;; when starting an Erlang shell in Emacs, default in the node name
  (setq inferior-erlang-machine-options '("-sname" "emacs"))
  (setq erlang-compile-extra-opts '(debug_info (i . "../include")))
  ;; add Erlang functions to an imenu menu
  (imenu-add-to-menubar "imenu")
  (local-set-key (kbd "C-c C-l") 'save-all-and-compile))
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)



;; Elixir
(setq alchemist-hooks-compile-on-save t)
(defun my-elixir-save-and-reload ()
  (interactive)
  (save-buffer))
;;  (alchemist-compile-this-buffer))
(add-hook 'elixir-mode-hook
          (lambda ()
            (setq alchemist-hooks-compile-on-save t)
            (local-set-key (kbd "C-c C-l") 'alchemist-iex-project-run)
            (local-set-key (kbd "M-q") 'alchemist-iex-send-current-line)
            (local-set-key (kbd "M-R") 'alchemist-iex-send-region)
            (local-set-key (kbd "<f2>") 'my-elixir-save-and-reload)
            (alchemist-mode +1)
            (company-mode)))

(add-hook 'alchemist-iex-mode-hook
          (lambda()
            (company-mode)))

;;;;
;;;;
;;;;
(defun ido-imenu ()
  "Update the imenu index and then use ido to select a symbol to navigate to.
Symbols matching the text at point are put first in the completion list."
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (flet ((addsymbols
            (symbol-list)
            (when (listp symbol-list)
              (dolist (symbol symbol-list)
                (let ((name nil) (position nil))
                  (cond
                   ((and (listp symbol) (imenu--subalist-p symbol))
                    (addsymbols symbol))

                   ((listp symbol)
                    (setq name (car symbol))
                    (setq position (cdr symbol)))

                   ((stringp symbol)
                    (setq name symbol)
                    (setq position
                          (get-text-property 1 'org-imenu-marker symbol))))

                  (unless (or (null position) (null name))
                    (add-to-list 'symbol-names name)
                    (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    ;; If there are matching symbols at point, put them at the beginning
    ;; of `symbol-names'.
    (let ((symbol-at-point (thing-at-point 'symbol)))
      (when symbol-at-point
        (let* ((regexp (concat (regexp-quote symbol-at-point) "$"))
               (matching-symbols
                (delq nil (mapcar
                           (lambda (symbol)
                             (if (string-match regexp symbol) symbol))
                           symbol-names))))
          (when matching-symbols
            (sort matching-symbols (lambda (a b) (> (length a) (length b))))
            (mapc
             (lambda (symbol)
               (setq symbol-names (cons symbol (delete symbol symbol-names))))
             matching-symbols)))))
    (let* ((selected-symbol (ido-completing-read "Symbol? " symbol-names))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (push-mark)
      (if (overlayp position)
          (goto-char (overlay-start position))
        (goto-char position)))))

(global-set-key (kbd "C-x C-o") 'ido-imenu)



;; theme
;(load-theme 'black-on-gray t t)
;(enable-theme 'black-on-gray)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(css-indent-offset 2)
 '(cua-mode t nil (cua-base))
 '(custom-enabled-themes '(leuven))
 '(haskell-indentation-layout-offset 4)
 '(haskell-indentation-left-offset 4)
 '(haskell-indentation-starter-offset 4)
 '(haskell-indentation-where-post-offset 4)
 '(haskell-indentation-where-pre-offset 4)
 '(package-selected-packages
   '(projectile string-inflection yasnippet xclip web-mode smex redo+ js2-mode))
 '(safe-local-variable-values '((intero-targets "ff:exe:ff" "ff-core:lib")))
 '(show-paren-mode t)
 '(tab-width 4)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background "white" :family "Courier New" :foundry "outline" :slant normal :weight normal :height 120 :width normal))))
 '(cperl-array-face ((t (:inherit font-lock-type-face))))
 '(cperl-hash-face ((t (:inherit font-lock-type-face :slant italic))))
 '(cperl-nonoverridable-face ((t (:inherit font-lock-constant-face))))
 '(web-mode-current-element-highlight-face ((t (:background "gold"))))
 '(web-mode-html-attr-name-face ((t (:inherit font-lock-builtin-face))))
 '(web-mode-html-tag-face ((t (:inherit font-lock-keyword-face)))))
